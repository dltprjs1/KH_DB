https://www.oracle.com/database/technologies/xe-prior-release-downloads.html <- 11버전

https://www.oracle.com/database/sqldeveloper/technologies/download/ <- 데이터베이스 developer

접속창 밑 "+" 버튼 클릭 -> name작성,ID,PWD작성 -> TEST -> 접속

-- : sql developer에서의 한 줄 주석


=================================================================================
/*   */ : sql developer 여러 줄 주석문

1. 테이블 
  - 관계형 데이터베이스는 기본적으로 데이터를 2차원형태의 표로 지정하고 관리를 함.
  - 이러한 표 형태의 데이터 저장 공간을 테이블(Table)이라고 한다.
  - 테이블은 2차원 형태이므로 가로줄과 세로줄로 구성이 되어 있다.
  * 가로줄 : 행(row)
  * 세로줄 : 열(column)

2. 행
 - 행은 지정하려는 하나의 개체를 구성하는 값
 - 예를 든다면 학생 한 사람에 대한 정보를 저장한 것

3. 열
 - 저장하는 데이터를 대표하는 이름과 공통적인 특성을 정의한 것 
 - 열은 저장 정보의 종류(자료형)와 자료의 저장 가능한 최대 크기, 중복 여부 설정

=================================================================================

오라클에서 속성에 들어가는 주요 자료형(data type)

1. NUMBER (n,n1): 숫자 자료형(정수,실수)
  * n : 전체 자릿수
  * n1 : 소수점 자릿수
  * n - n1 : 정수 자릿수
  예) number(7,2) : 전체 자릿수는 7자리이고, 정수는 5자리, 실수는 2자리
  
2. char(n) : 문자열 n개가 저장되는 자료형 --> 고정 자료형
  * 고정 자료형 : n으로 몇글자를 쓰더라도 컴퓨터는 n만큼 문자열로 인식한다.

3. varchar(n) : 문자열 n개가 저장되는 자료형 --> 가변 자료형
  * 현재 오라클에서 사용하지 않는 자료형.
  * 가변 자료형 : n개까지 적을 수 있지만 적은 수 만큼 문자열로 인식
  
4. varchar2(n) : 문자열 n개가 저장되는 자료형 --> 가변 자료형
  * 한글은 무조건 한 글자당 2byte씩 인식된다.
  
5. date : 날짜가 저장되는 자료형
  * 시스템의 현재 날짜 및 시간이 저장된다.
  * sysdate(현재 시스템에 저장된 날짜)키워드와 주로 사용된다.

=================================================================================

-무결성(Integrity) : 데이터베이스에 저장된 값과 그것이 표현하는 현실 세계의 실제값이
                   일치하는 정확성을 의미한다.
                   
-무결성 제약조건 : 데이터베이스에 저장된 데이터의 정확성을 보장하기 위해서 정확하지 않은
                데이터가 데이터베이스 내에 저장되는 것을 방지하기 위한 조건, 제약조건은 생략가능하다.

-데이터베이스 내에서 무결성 제약조건의 종류

1. unique 제약 조건 : 중복이 되면 안 되는 제약 조건
2. not null 제약 조건 : 공백을 허용치 않는 제약 조건
3. check 제약 조건 : 특정한 값이 아닌 데이터가 들어오지 못하게 하는 제약 조건
4. primary key 제약 조건 : 기본 키 제약 조건(unique + not null)
 * 기본 키는 해당 데이터를 대표하는 컬럼으로써의 역할을 수행하며, 
   다른 테이블에서 외래키들이 참조할 수 있는 키로써의 자격을 가짐
5. foreign key(외래 키) 제약 조건 : 외래키는 다른 테이블의 기본키를 참조하는 컬럼의 집합이다.
                                여기서의 외래 키 값은 참조하고 있는 테이블의 기본키에
                                없는 내용을 참조할 수 없다.이를 참조 무결성이라고 한다.

=================================================================================

명령 프롬프트를 통해 아이디 비밀번호 만들기 및 변경

sqlplus / as sysdba;                                         <-- 명령 프롬프트를 통해 oracle sql에 접근하는 방법

create user 아이디 identified by 비밀번호;             <-- 아이디 비밀번호 만들기

grant connect , resource to 아이디;                     <-- DDL,DML,DCL 활성화 하기

alter user 아이디 identified by 비밀번호;               <-- 비밀번호 변경하기

alter user 아이디 account unlock;                        <-- 아이디 접속 가능하게 하기

 - connect role
  ==> 오라클에 접속할 수 있는 세션 생성 및 테이블을 생성하거나 조회할 수 있는 가장 일반적은 권한으로
      구성되어 있다. 사용자가 데이터베이스에 접속 가능하도록 하기 위해서 만든 권한이 있는 role을 말한다.

 - resource role
  ==>사용자가 테이블을 생성할 수 있도록 하기 위해서 시스템 권한을 묶어 놓은 것을 말한다. 
     또한, insert, update, delete, 구문을 사용할 수 있는 권한을 묶어 놓은 것을 말한다.

=================================================================================

데이터베이스에 저장

commit;

=================================================================================

이전 상태로 되돌리는 방법

rollback;

=================================================================================

테이블 만들기  

create table 테이블명 (
컬럼명 자료형(크기) 제약조건,
컬럼명 자료형(크기) 제약조건,
컬럼명 자료형(크기) 제약조건,
컬럼명 자료형(크기) 제약조건,
컬럼명 자료형(크기) 제약조건
);  <-- 5개의 컬럼을 가진 테이블

=================================================================================

테이블에 컬럼을 추가하는 방법
alter table 테이블명 add (추가할칼럼명 데이터타입 제약조건)

alter - add

=================================================================================

테이블에 컬럼을 수정하는 방법
alter table 테이블명 modify (컬럼명 데이터타입(크기))

alter - modify

=================================================================================

테이블에 컬럼명을 변경하는 방법
alter table 테이블명 rename column 기존 컬럼명 to 새로 변경할 컬럼명;

alter - rename

=================================================================================

테이블에 컬럼명 삭제하는 방법
alter table 테이블명 drop column 컬럼명;

alter - drop

=================================================================================

테이블에 데이터(정보)를 추가하기(첫번째 방법)
insert into 테이블명(컬럼명) values(컬럼 수에 맞게 해당하는 정보입력 " , "로 구분)

insert into - values

=================================================================================

테이블에 데이터(정보)를 추가하기(두번째방법)
insert into 테이블명 values(모든 칼럼에 순서대로 정보 추가하기) 

insert into - values

=================================================================================

모든 데이터(정보)를 삭제하기
delete from 테이블명

delete from

=================================================================================

테이블에 있는 모든 데이터를 콘솔에 출력하기
select * from 테이블명

=================================================================================

테이블에 있는 특정 컬럼만 콘솔에 출력하기 - 컬럼의 자료형이 number일 경우 연상도 가능
select 컬럼명,컬럼명 from 테이블명

select 컬럼명,컬럼명, 컬럼명(+ , _ , * , / ) 컬럼명 from 테이블명
null 값을 가지는 컬럼은 다른 컬럼과 연산을 하게되면 모두 null로 처리된다.

nvl() : null값을 특정한 값으로 변경 시켜주는 함수  <== 모든 자료형에 적용가능
        nvl() 함수를 사용할 떄는 전환되는 값의 자료형을 일치시켜야한다.
        nvl(null 값이 들어가 있는 컬럼명, 변경될 값)

nvl2() : 자바에서 삼항연산자와 비슷하다
         nvl2(컬럼명,aaa,bbb) 
         ==> 컬럼명의 값이 null이 아닌 경우 aaa반환, 컬럼명의 값이 null인 경우 bbb반환 

=================================================================================

as 키워드 : 컬럼 제목(title)에 이름을 변경하는 키워드(생략 가능)
              별명, 별칭이라고 생각하면 된다
              사용시에는 컬럼명 바로 뒤에 사용하고 컬럼명과 별칭 사이에 as라는 키워드를 넣어주면됨
	  특정 조건하에 as 생략가능
=================================================================================

distinct : 중복을 제거하는 키워드

  - 주로 하나의 컬럼에서 중복된 값을 제거하고 보여줄 때 사용한다
  - distinct 키워드는 항상 select 키워드 다음에 사용된다.
  - distinct 키워드 뒤에 나오는 컬럼들은 모두 distinct의 명령을 받는다
  - distinct 키워드 뒤에 여러 개의 컬럼이 기술이 되면 해당 칼럼들은 중복이 되지 않게 나타난다.

select distinct 컬럼명 from emp;

=================================================================================

||  : 연결 연산자
select name || '님은 지금' || job || ' 입니다. ' from 테이블명; 
==> 이세건님은 지금 무직입니다.

=================================================================================

테이블 삭제하기
drop table 테이블명;
drop table 테이블명 purge;

purge를 붙이면 휴지통으로 들어가지않고 바로 삭제
purge를 붙이지 않으면 휴지통으로 테이블이 들어간다. 

=================================================================================

 where 조건절
- 모든 데이터를 가져 오는 것이 아니라 사용자가 원하는 데이터만 조회할 경우에 사용
- where 조건절은 자료를 필터링할 때 사용되는 키워드.
- where 조건형은 from 테이블이름 뒤에 기술해야 한다.
- 조건식에 컬럼명이 들어가는 경우 대,소문자 구분해야한다.
- 형식) select 컬럼명, 컬럼명 ...컬럼명 from 테이블명 where 조건식;

 조건식
 1) = : 조건이 같은가?
 2) < : 조건이 작은가?
 3) > : 조건이 큰가?
 4) <= : 조건이 작거나 같은가?
 5) >= : 조건이 크거나 같은가?
 6) != : 조건이 같지 않은가? 
 7) <> : 조건이 같지 않은가?
 8) between A and B : 조건이 A~B사이에 있는 가?(작은 값을 앞에 기술하고 큰 값을 뒤에 기술해야한다.)
 9) in(list) : list값 중에 어느 하나와 일치하는가? 
 10) not between A and B : A와 B 사이에 있지 않은가? (A와B값은 포함되지 않는다)
 11) not in(list) : list값 중 하나와 일치하지 않는가?
 12) is null : null값인가?
 13) is not null : null값이 아닌가?

--[문제] emp 테이블에서 담당업무가 'clerk'인 사원의 사번,이름,담당업무,급여 출력

select empno,ename,job,sal from emp where job = 'CLERK';

--[문제] emp 테이블에서 1982-1-1 이후에 입사한 사원의 사번,이름,담당업무,급여,입사일자를 출력

select EMPNO,ENAME,JOB,SAL,HIREDATE from emp where HIREDATE >= '82/01/01';   <<<홑따옴표 안 붙이면 오류(date 타입)

--[문제] emp 테이블에서 급여가 1300~1500사이인 사원의 이름 담당업무 급여 부서번호 출력

select ename,job,sal,deptno from emp where SAL between  1300 and 1500;

--[문제] emp 테이블에서 사번이 7902,7789,7566인 사원의 사번 이름 담당업무를 출력

select empno,ename,job from emp where EMPNO = 7902 or EMPNO = 7789 or EMPNO = 7566;
select empno,ename,job from emp where EMPno in(7902,7789,7566);

--[문제] emp 테이블에서 보너스가 300이거나 500이거나 1400인 사원의 모든 정보를 출력

select * from emp where COMM = 300 or COMM = 500 or COMM =  1400;
select * from emp where comm in(300,500,1400);

--[문제] member10 테이블에서 이름 홍길동이면서 직업이 학생인 회원의 모든 정보를 출력

select * from member10 where MEMNAME = '이순신' and AGE >= 30; (member10 테이블에 홍길동 이름과 직업 컬럼이 없어서 비슷한 답변으로 대체)

--[문제] products 테이블에서 제조사가 삼성 또는 현대 이면서 입고가가 100만원 이하인 상품의 상품명과 입고가 출고가를 화면에 출력

select products_name,input_price,output_price from products where COMPANY = '삼성' or COMPANY = '현대' and INPUT_PRICE > 1000000;

--[문제] emp 테이블에서 급여가 1100이상이고, 담당업무가 MANAGER인 사원의 사번 이름 담당업무 급여를 출력

select empno,ename,job,sal from emp where SAL >=1100 and job = 'MANAGER';

=================================================================================

 like 키워드 : 검색을 하는 키워드
 where 컬럼명 like 찾고자하는 단어(대,소문자 구별!)

 1) where ename like '%S%'
    ==> ename 칼럼에 S자를 포함하는 사원의 이름을 검색
    
 2) where ename like 'S%'
    ==> ename 컬럼의 첫글자가 S자로 시작하는 사원의 이름을 검색
    
 3) where ename like '%S'
    ==> ename 칼럼에 마지막 글자가 s자로 끝나는 사원의 이름을 검색
 4) where ename like '_S%'
    ==> ename 칼럼에 두번에 글자가 s자를 포함하는 사워의 이름을 검색

--[문제] emp 테이블에서 이름이 S자로 끝나는 사원의 사번 이름 담당업무 부서번호를 출력

select empno,ename,job,deptno from emp where ENAME like '%S';

--[문제] emp 테이블에서 이름의 세번쨰 글자가 R이 들어가는 사원의 이름 담당업무 급여를 출력

select ename,job,sal from emp where Ename like '__R%';

--[문제] emp 테이블에서 이름의 두번쨰 글자가 O인 사원의 모든 정보를 화면에 출력

select * from emp where Ename like '_O%';

--[문제] emp 테이블에서 입사년도가 82년도인 사원의 사번 이름 담당업무 입사일자를 화면에 출력

select empno,ename,job,hiredate from emp where hiredate between '82/01/01' and '82/12/31';
select empno,ename,job,hiredate from emp where hiredate like '82%';

--[문제] member10 테이블에서 성이 김씨인 회원의 모든 정보를 화면에 출력

select * from member10 where memname like '김%';

--[문제] member10 테이블에서 주소에 서울시 가 들어가는 회원의 이름 주소 직업을 화면에 출력

select memname from member10 where memname like '이%';

--[문제] products 테이블에서 제품명에 에어컨을 포함하는 제품의 제품명 입고가 출고가 제조사를 화면에 출력

select products_name,input_price,output_price,company from products where PRODUCTS_NAME like '%에어컨%';

=================================================================================

order by절
- 자료를 정렬하여 나타낼 때 사용하는 명령문
- order by 절을 사용할 때는 select 구문의 맨 마지막에 위치한다.
- asc : 오름차순 정렬
- desc : 내림차순 정렬
- 기본적으로 order by절을 사용 시에는 오름차순 정렬이 default 값이다
- 오름차순 정렬인 경우에는 asc를 생락해도 된다.

--[문제] emp 테이블에서 부서번호를 기준으로 오름차순 정렬을 하고 부서번호가 같은 경우 급여를 기준으로 내림차순으로 정렬하여 모든 정보를 화면에 출력

select * from emp order by deptno (asc), sal desc;

--[문제] products 테이블에서 판매가격을 기준으로 내림차순 정렬하고, 모든 정보를 화면에 출력

select * from products order by output_price desc;

--[문제] products 테이블에서 배송비를 기준으로 내림차순으로 정렬하되, 배송비가 같은 경우 마일리지를 기준으로 내림차순으로 정렬하여 모든정보를 화면에 출력

select * from products order by trans_cost desc , mileage desc;

--[문제] emp 테이블에서 입사일자가 오래된 사원부터 최근에 입사한 사원을 기준으로 정렬하되, 사원명, 입사일자를 화면에 출력

select ename,hiredate from emp order by hiredate(asc);

--[문제] emp 테이블에서 급여를 기준으로 내림차순으로 정렬하여 모든 정보를 화면에 출력

select * from emp order by sal desc;

--[문제] emp 테이블에서 급여가 1100이상인 사원들의 정보를 보여주되 입사일자가 빠른 순으로 정렬하여 모든 정보를 화면에 출력

select * from emp where SAL >= 1100 order by hiredate (asc);

--[문제] emp 테이블에서 부서번호를 기준으로 오름차순 정렬하여 나타내고 부서번호가 같은 경우 담당업무를 기준으로 오름차순으로 정렬
-- 만약 담당업무가 같다고 하면 급여가 많은데서 적은 순으로 정렬하여 모든 정보를 화면에 출력

select * from emp order by deptno (asc), job (asc), sal desc;

=================================================================================

 not 키워드 : 부정
- 쿼리문 작성 시 부정이 아닌 긍정의 쿼리문을 작성한 후에 부정의 의미인 not을 작성할 것
- 예) emp 테이블에서 담당업무가 MANAGER, CLERK,ANALIST 가 아닌 사원의 사번,이름,담당업무,급여를 화면에 출력
*/

select empno,ename,job,sal from emp where job not in('MANAGER','CLERK','ANALYST');
select empno,ename,job,sal from emp where not job = 'MANAGER' and not job = 'CLERK' and not job = 'ANALYST';

--[문제] emp 테이블에서 이름에 s자가 들어가지 않는 사원의 이름 담당업무를 화면에 출력

select ename,job from emp where ename not like '%S%';

--[문제] emp 테이블에서 부서번호가 10번 부서가 아닌 사원의 이름 담당업무 부서번호를 화면에 출력

select ename,job,deptno from emp where not deptno = 10;
select ename,job,deptno from emp where deptno != 10;
select ename,job,deptno from emp where deptno <> 10;

--[문제] member10 테이블에서 주소가 서울시가 아닌 회원의 모든 정보를 화면에 출력

select * from member10 where addr not like '서울시%';

--[문제] products 테이블에서 출고가가 100만원 미만이 아닌 제품의 상품명과 출고가를 화면에 출력

select products_name,output_price from products where output_price > 1000000;
select products_name,output_price from products where not output_price < 1000000;

--[문제] emp테이블에서 보너스가 null이 아닌 사원의 모든 정보를 화면에 출력

select * from emp where comm = nvl(COMM,null);
select * from emp where comm is not null;

=================================================================================

 그룹함수 : 여러 행 또는 테이블 전체에 대하여 함수가 적용되어 하나의 결과값을 가져오는 함수

  1) avg() : 평균값을 구하는 함수.
  2) count() : 행(레코드)의 갯수를 구하는 함수
    ==> null값은 무시하고 행의 갯수를 구한다.
  3) max() : 최대값을 구하는 함수
  4) min() : 최소값을 구하는 함수
  5) sum() : 총 합계를 구하는 함수

-- emp 테이블에서 사번을 가지고 있는 모든 사원의 수를 화면에 출력

select count(*)"사원의 수" from emp;
select count(empno) form emp;                                                                                                              

--[문제] emp 테이블에서 관리자(mgr)의 수를 화면에 출력

select count(distinct mgr) 관리자 from emp;

--[문제] emp테이블에서 보너스를 가진 사원의 수를 화면에 출력

select count(comm) "보너스 사원" from emp;

--[문제] emp테이블에서 모든 SALESMAN의 급여 평균과 급여 최고액 급여 최소액 급여 합계액을 화면에 출력

select avg(sal)"판매원 급여평균" ,max(sal)"판매원 급여 최고액",min(sal)"판매원 급여 최소액",sum(sal)"판매원 급여 합계" from emp where job = 'SALESMAN';

--[문제] emp테이블에서 등록되어 있는 사원의 총 수 , 보너스가 null이 아닌 인원수, 보너스의 평균, 등록되어 있는 부서의 수를 화면에 출력

select count(*)"사원 총원",count(comm)"보너스 사원",avg(comm)"보너스 평균 급여",count(distinct deptno)"총 부서" from emp;

=================================================================================

 시퀀스(sequence)
  ==> 순서를 부여할 때 사용하는 문법, 연속적인 번호를 만들어 주는 기능
  
  형식) 
  create sequence 시퀀스 생성
  start with n (시작번호 설정 - 기본적으로 기본값은 1이다)
  increment by n (증가번호 설정 - 기본적으로 기본값은 1이다)
  maxvalue n (시퀀스 최대 번호 설정)
  minvalue n (시퀀스 최소 번호 설정
  cache /nocache (캐쉬 메모리 사용 여부)

   1) cache : 시퀀스를 빨리 제공하기 위해 미리 캐쉬 메모리에 시퀀스를 넣어 두고 준비하고 있다가
              시퀀스 작업이 필요할 때 사용한다. default로는 20개의 시퀀스를 캐쉬메모리에 보관하고 있다
   2) nocache : cache 기능을 사용하지 않겠다는 의미

create table memo(
bunho number(5),
title varchar2(100) not null,
writer varchar2(50) not null,
cont varchar2(1000) not null,
regdate date,
primary key(bunho)
);


create sequence memo_seq                                                    <<< 시퀀스 만들기
start with 1                                                                         <<< 시퀀스 number 1부터 시작
increment by 1                                                                    <<< 시퀀스 number 1씩 증가
nocache;							   <<< 캐쉬 없음


insert into memo values(memo_seq.nextval,'메모1','홍길동','길동이 메모',sysdate);
insert into memo values(memo_seq.nextval,'메모2','이순신','장군님 메모',sysdate);
insert into memo values(memo_seq.nextval,'메모3','유관순','유관순 열사 메모',sysdate);

select * from memo;

=================================================================================

 제약 조건
 - 테이블에 부적합한 자료가 입력되는 것을 방지하기 위해서 테이블을 생성할 떄 각 컬럼에 대해서 정의하는
   여러가지 규칙을 정한 것
   
    1) not null 
    2) unique
    3) primary key (not null + unique)
    4) foreign key
    5) check
 
     1.not null 제약조건 
      ==> null 값이 입력되지 못하게 하는 제약조건
      ==> 특정 열에 데이터의 중복 여부와는 상관 없다.
      
     2.unique 제약조건
      ==> 열에 저장할 데이터의 중복을 허용하지 않는 제약조건
      ==> null 값은 허용한다.
      
      3.primary key 제약조건
      ==> not null + unique 제약조건
      ==> 테이블중 하나의 칼럼에만 기본키를 설정할 수 있다.
      ==> 보통은 주민번호나, emp 테이블의 empno등이 대표적인 예이다.
      
      4.foriegn key 제약조건
      ==> 다른 테이블의 필드(컬럼)를 참조해서 무결성을 검사하는 제약조건
      ==> 참조 키 : 부모 테이블의 컬럼
      ==> 외래 키 : 자식 테이블의 컬럼
      ==> 자식 테이블의 컬럼의 값(데이터)이 부모 테이블에 없는 경우 무결성의 규칙에 위반한다.
      ==> 외래 키가 존재하기 위해서는 우선적으로 부모 테이블이 먼저 만들어져야 한다.
       
       * foreign key를 쓰기 위한 조건
       
        ㄱ. on delete cascade : 부모 테이블의 컬럼 값 삭제 시 해당 컬럼 값을 참조하고 있는 자식 테이블의 컬럼 값까지 모두 삭제하는 옵션
        ㄴ. on delete set null : 부모 테이블의 컬럼 값 삭제 시 해당 컬럼 값을 참조하고 있는 자식 테이블의 컬럼 값은 null로 지정된다.
      
      5.check 제약조건
      ==>열에 저장할 수 있는 값의 범위 또는 패턴을 정의 할 떄 사용되는 제약 조건
       
       
 */

create table null_test(
 col1 varchar2(10) not null,
 col2 varchar2(10) not null,
 col3 varchar2(10)
 );
 
insert into null_test values('aaa','aa1','aa2');
insert into null_test(col1, col2) values('bb','bb1');

insert into null_test(col1, col2) values('cc',''); --오류 col2 에 null값

create table unique_test(
 col1 varchar2(10) unique,
 col2 varchar2(10) unique,
 col3 varchar2(10) not null,
 col4 varchar2(10) not null
);

insert into unique_test values('aa','aa1','aaa1','aaaa1');
insert into unique_test values('bb','aa1','bbb1','bbbb1');  --오류 : cal2 컴럼의 중복값

create table foreign_test(
empno number(5) primary key,
ename varchar2(20) not null,
job varchar2(50) not null,
deptno number(2) references dept(deptno)  --references 테이블명(컬럼명) : 외래키 제약조건 선언 (deptno의 컴럼과 다른 값이 오게 되면 오류가 난다.)
);

 insert into foreign_test values(1111,'홍길동','영업부',30);
 insert into foreign_test values(2222,'유관순','회계부',10);
 insert into foreign_test values(3333,'김유신','IT',50);  --오류 : emp테이블 deptno칼럼에 10,20,30이라는 값은 있지만 50이라는 값이 없기 때문에
 
 create table check_test(
 gender varchar2(6) (constraint gender_ck) check(gender in('남자','여자')));  --gender 컬럼값으로 남자 또는 여자만 입력 가능하다.
 
 constraint gender_ck<<< 생략가능

 insert into check_test values('남자');
 insert into check_test values('여자');
 insert into check_test values('남성');  --오류 

=================================================================================

join ~ on 키워드
    
    on 키워드
    - 테이블과 테이블을 연결하여 특정한 데이터를 얻고자 할 때 사용된다
    - 두 개 이상의 테이블의 정보가 나뉘어져 있을 때 사용
    - 중복해서 데이터가 저장되는 것을 막기 위함
    - 두 개의 테이블로 나뉘어진 경우에는 데이터의 중복은 발생하지 않지만 원하는 정보를 얻으려면 여러번 질의를 해야 하는 불편함이 발생한다.
    - 특정 사원이 소속된 부서의 부서명을 알고 싶은 경우에는 emp 테이블과 dept 테이블을 넘나드는 작업이 생기므로 상당히 불편하다
      그래서 두 개의 테이블을 결합해서 원하는 결과를 얻어낼 수 있도록 하는 조인이라는 기능이 생겨나게 되었다. 
    - join이 필요한 두 테이블은 join 키워드 사용시 " as  별칭 "을 꼭 사용하여 호출 하고자 하는 컬럼을 확실하게 구분해야 오류가 생기지 않는다.    
    
        1) Cross Join : - 두 개 이상의 테이블이 조인될 때 조건이 없이 테이블의 결합이 이루어지는 조인
                        - 테이블 상호간에 연결될 수 있는 모든 경우의 수를 산출하여 나타내는 조인이다
                        - 그렇기 때문에 테이블 전체 행의 컬럼이 조인이 된다.
                        - 현재는 사용을 안하는 조인 종류

        2) ****Equi join : - 가장 많이 사용되는 조인 방법
                           - 조인의 대상이 되는 두 테이블에서 공통적으로 존재하는 컬럼의 값이 일치되는 행을 연결하여 결과를 생성하는 방법
                           - 두 테이블의 조인을 하려면 일치되는 공통 컬럼을 사용해야한다.

        3) self join : - 하나의 테이블 내에서 조인을 해야 하는 자료를 얻을 수 있는데 말 그대로 자기 자신 테이블과 조인을 맺는 것을 말한다.
                       - from 절 다음에 테이블 이름을 나란히 두 번 기술을 할 수 없다. 따라서 같은 테이블이 하나 더 존재하는 것처럼 사용할 수 있도록
                         테이블에 별칭을 붙여서 사용해야 한다.

        4) Outer Join : - 2개 이상의 테이블이 조인이 될 때 어느 한 쪽 테이블에는 해당되는 데이터가 다른쪽 테이블에는 데이터가 존재하지 않는 경우
                          그 데이터가 출력이 되지 않는 문제점을 해결하기 위해 사용되는 조인 기법
                        - 정보가 부족한 테이블의 컬럼 뒤에 '(+)' 기호를 붙여 사용을 한다.

-- emp 테이블에서 사원의 사번, 이름, 담당업무, 부서번호 및 부서명 근무위치를 화면에 보여주세요.                             
-- ==> emp 테이블과 dept 테이블을 조인시켜 주어야 한다.

select e.empno, e.ename, e.job, d.deptno, d.dname, d.loc from emp e join dept d on e.deptno = d.deptno;

--[문제1] 부서명이 'reaserch'인 사원의 사번, 이름, 급여, 부서명 근무위치를 화면에 출력                                                     

select e.empno,e.ename,e.job,e.deptno,d.loc from emp e join dept d on e.deptno = d.deptno where dname = 'RESEARCH';

--[문제2] emp 테이블에서 'new york'에 근무하는 사원의 이름 급여 부선번호를 화면에 출력                                             
select e.ename,e.sal,e.deptno from emp e join dept d on e.deptno = d.deptno where loc = 'NEW YORK';

--[문제3] emp 테이블에서 'ACCOUNTING' 부서 소속 사원의 이름과 담당업무, 입사일 그리고 부서번호, 부서명을 화면에 출력                      '
select e.ename,e.job,e.hiredate,e.deptno,d.dname from emp e join dept d on e.deptno = d.deptno where d.dname = 'ACCOUNTING';

--[문제4] emp 테이블에서 담당업무가 'SALESMAN' 인 사원의 이름과, 담당업무, 부서번호, 부서명, 근무위치를 화면에 출력            
select e.ename,e.job,e.deptno,d.dname,d.loc from emp e join dept d on e.deptno = d.deptno where job = 'SALESMAN';

-- emp 테이블에서 각 사원별 관리자의 이름을 화면에 출력해 보자.                                                                                
-- 예) CLERK의 매니저 이름은 KING 입니다.
select e1.ename ||'의 매니저 이름은' ||e2.ename||' 입니다.' from emp e1 join emp e2 on e1.mgr = e2.empno;

-- [문제] emp 테이블에서 매니저가 'king' 인 사원들의 이름과 담당업무를 화면에 출력                         
select e2.ename,e2.job from emp e1 join emp e2 on e1.mgr = e2.empno where e2.ename = 'KING';

select e.ename,d.deptno,d.dname from emp e join dept d on e.deptno(+) = d.deptno;  -- (+)기호를 통해 d.deptno에만 있는 40번 deptno를 가져올 수 있다

select e1.ename, e1.job,e1.mgr from emp e1 join emp e2 on e1.mgr = e2. empno(+);   -- (+)기호를 통해 empno mgr이 null값인 컬럼도 가져 올 수 있다.

=================================================================================

dual 테이블 
 - 오라클에서 자체적으로 제공해 주는 테이블 
 - 간단하게 함수를 이용해서 계산, 결과값을 확인할 때 사용하는 테이블이다.
 - 오직 한 행, 한 컬럼만을 담고 있는 테이블.
 - 사용 용도 : 특정 테이블을 생성할 필요 없이 함수 또는 계산을 하고자 할 때 사용한다.
 - dummy테이블이라 불린다

=================================================================================

오라클에서 제공해 주는 함수

 1. 날짜와 관련된 함수
   1) sysdate : 현재 시스템의 날짜를 구해 오는 함수,시,분,초는 가져오지 않는다.
   2) add_months(sysdate, 숫자(개월 수)) : 현재 날짜에서 개월 수를 더해 주는 함수
   3) next_day (현재 날짜, '요일') : 다가올 날짜(요일)을 구해주는 함수, 오늘 날짜는 구해주지 않는다.
   4) to_char(날짜, 날짜형식) : 형식에 맞게 문자열로 날짜를 출력하는 함수.
   5) months_between() : 두 날짜 사이의 개월 수를 출력하는 함수,실수 값으로 출력한다.
   6) last_day() : 주어진 날짜가 속한 달의 마지막 날짜를 반환하는 함수
   
 2. 문자와 관련된 함수
   1) concat('문자열1','문자열2') : 문자열을 연결(결합)해 주는 함수 
   2) || 연산자 : 문자열을 연결하는 연산자
   3) upper() : 소문자를 대문자로 바꿔 주는 함수
   4) lower() : 대문자를 소문자로 바꿔 주는 함수
   5) substr('문자열' ,x,y) : 문자열을 x부터 y의 길이만큼 출력해주는 함수, x의 값이 음수일 경우 오른쪽부터 시작한다
   6) 자릿수를 늘려 주는 함수
      * lpad('문자열','전체자릿수','늘어난 자릿수에 들어갈 문자열') : 왼쪽 자릿수를 늘려 주는 함수
      * rpad('문자열','전체자릿수','늘어난 자릿수에 들어갈 문자열') : 오른쪽 자릿수를 늘려 주는 함수
   7) 문자를 지워 주는 함수
      * ltrim() : 왼쪽 문자를 지워 주는 함수
      * rtrim() : 오른쪽 문자를 지워 주는 함수
   8) replace() : 문자를 교체해 주는 함수
        형식) replace('원본 문자열','교체될 문자열','새로운 문자열')
 3. 숫자와 관련된 함수
   1) abs(정수) : 절대값을 구하는 함수
   2) sign(정수) : 양수(1),음수(-1),0을 반환해 주는 함수
   3) round(실수) : 반올림 해 주는 함수,
   4) round(숫자,반올림 위치) 음수 값을 지정하면 자연수(정수) 쪽으로 한자리씩 위로 반올림 한다.
   5) trunc() : 소수점 이하 자릿수를 잘라내는 함수
      형식) trunc(숫자,버릴위치)
   6) ceil() : 무조건 올림을 해 주는 함수 
   7) power() : 제곱을 구해 주는 함수
   8) mod() : 나머지를 구해주는 함수
      형식) mod(나눗셈 될 숫자, 나눌 숫자)
   9) sqrt() : 제곱근을 구해 주는 함수

select sysdate from dual;
select add_months(sysdate,3) from dual;
select next_day(sysdate,'일요일') from dual;
select to_char(sysdate,'yyyy/mm/dd') from dual;
select to_char(sysdate-30,'mm/dd/yyyy') from dual; -- 30일 전
select to_char(sysdate-50/24,'yyyy-mm-dd') from dual; --50시간 전
select months_between('22/12/31',sysdate) from dual;
select last_day(sysdate) from dual;

--문자
select concat('안녕','하세요') from dual;
select '방가' || '방가' from dual;
select upper('hello world') from dual;
select lower('HELLO WORLD') from dual;
select substr('hello world',3,2) from dual; -- LL 출력
select substr('hello world',-3,2) from dual; -- RL 출력
select lpad('hello world',18,'oracle h') from dual;
select lpad('hello world',23,'from oracle db') from dual;
select ltrim(lpad('hello world',23,'from oracle db'),'from') from dual;
select rtrim(ltrim(lpad('hello world',23,'from oracle db'),'from'),'world') from dual;
select replace('hello world' , 'hello','java')from dual;

--숫자
select abs(-15) from dual;
select sign(15) from dual;  -- 1반환
select sign(-15) from dual; -- -1반환
select sign(0) from dual;   -- 0반환
select round(1234.5678) from dual;  --1235
select round(1234.5678,3) from dual; --1234.568
select round(1234.5678,-1) from dual; --1230
select trunc(1234.5678)from dual; -- 1234
select trunc(1234.5678,3) from dual; -- 1234.567
select trunc(1234.5678,-1) from dual; --1230
select ceil(1234.5678) from dual;
select power(4,3)from dual;
select mod(31,5) from dual;
select sqrt(3) from dual;
select sqrt(16) from dual;

--[문제] emp 테이블에서 결과가 아래와 같이 나오도록 화면에 출력
-- 결과) 'SCOTT의 담당업무는 ANALYIST 입니다.'
-- 단 , concat() 함수를 이용하세요 

select concat(ename,'의 담당업무는 '),concat(job,' 입니다') from emp;

--[문제] emp 테이블에서 결과가 아래와 같이 나오도록 화면에 출력
-- 결과) 'SCOTT의 연봉은 36000입니다.'
-- 단, concat() 함수를 이용하세요.

select concat(ename,'의 연봉은'),concat(sal,'입니다')from emp;

--[문제] member10 테이블에서 결과가 아래와 같이 나오도록 화면에 출력
-- 결과) '홍길동 회원의 직업은 학생입니다.'
-- 단, concat() 함수를 이용하세요

select concat(memname,'회원의 직업은'),concat(job,'입니다')from member10;

--[문제] emp 테이블에서 사번, 이름, 담당업무를 화면에 출력하되, 담당업무는 소문자로 변경하여 출력

select empno,ename,lower(job) from emp;

--[문제] 여러분의 주민등록 번호 중에서 생년월일을 추출하여 화면에 출력

select substr('931019-1111111',1,6) from dual;

--[문제] emp 테이블에서 담당업무에 'A'라는 글자를 '$'로 바꾸어 화면에 출력

select replace(job,'A','$') from emp;

--[문제] member10 테이블에서 주소가 '서울시'로 된 정보를 '서울특별시'로 바꾸어 화면에 출력

select replace(addr,'서울시','서울특별시') from member10;

--[문제] member10 테이블에서 직업이 '학생'인 정보를 '대학생'으로 바뀌어 화면에 출력

select lpad(job,6,'대학생') from member10 where job = '학생';

=================================================================================

서브쿼리
 - 하나의 쿼리문 안에 포함되어 있는 또 하나의 쿼리문을 말한다.
 - 쿼리문 안에 또 다른 쿼리문이 존재하는 것을 말한다.
 - 서브쿼리는 메인쿼리가 서브쿼리를 포함하는 종속적인 관계이다.
 - 여러 번 쿼리를 실행해서 얻을 수 있는 결과를 하나의 중첩된 쿼리 문장으로 결과를 얻을 수 있게 해 준다.
 
서브쿼리 사용시 주의사항
 1) 서브쿼리는 괄호로 묶어서 사용해야 한다.
 2) 서브쿼리 안에서는 order by절을 사용 할 수 없다.

사용방법 : 우선은 안쪽에 있는 쿼리문을 실행 한 후, 그 결과값을 가지고 바깥쪽 쿼리문을 실행한다.

-- emp 테이블에서 사원이름이 'SCOTT'인 사원의 급여보다 더 많은 급여를 받는 사원의 사번,이름,담당업무,급여를 화면에 출력

select empno,ename,job,sal from emp where sal>(select sal from emp where ename = 'SCOTT');

-- [문제1] emp 테이블에서 평균급여보다 더 적게 받는 사원의
-- 사번, 이름, 담당업무, 급여, 부서번호를 화면에 보여주세요.

select empno,ename,job,sal,deptno from emp where sal<(select avg(sal)from emp);

-- [문제2] emp 테이블에서 사번이 7521인 사원과 담당업무가 같고,
-- 급여가 7934인 사원보다 더 많이 받는 사원의 사번, 이름, 담당업무,
-- 급여를 화면에 보여주세요.

select empno,ename,job,sal from emp where job =(select job from emp where empno = '7521')and sal >(select sal from emp where empno='7934'); 

-- [문제3] emp 테이블에서 담당업무가 'MANAGER' 인 사원의 최소급여보다
-- 적으면서, 담당업무가 'CLERK'은 아닌 사원의 사번, 이름, 담당업무,
-- 급여를 화면에 보여주세요.

select empno,ename,job,sal from emp where sal<(select min(sal) from emp where job = 'MANAGER') and job != 'CLERK'; 

-- [문제4] 부서위치가 'DALLAS' 인 사원의 사번, 이름, 부서번호, 
-- 담당업무를 화면에 보여주세요.

select e.empno,e.ename,e.deptno,e.job from emp e join dept d on e.deptno = d.deptno where d.loc = 'DALLAS';

-- [문제5] member10 테이블에 있는 고객의 정보 중 마일리지가 가장 높은
-- 고객의 모든 정보를 화면에 보여주세요.

select * from member10 where mileage = (select max(mileage) from member10);

-- [문제6] emp 테이블에서 'SMITH' 인 사원보다 더 많은 급여를
-- 받는 사원의 이름과, 급여를 화면에 보여주세요.

select ename,sal from emp where sal>(select sal from emp where ename = 'SMITH');


-- [문제7] emp 테이블에서 10번 부서 급여의 평균 급여보다 적은 급여를 받는
-- 사원들의 이름, 급여, 부서번호를 화면에 보여주세요.

select ename,sal,deptno from emp where sal<(select avg(sal) from emp where deptno = '10');


-- [문제8] emp 테이블에서 'BLAKE'와 같은 부서에 있는 사원들의
-- 이름과 입사일자, 부서번호를 화면에 보여주되, 'BLAKE' 는 제외하고
-- 화면에 보여주세요.

select ename,hiredate,deptno from emp where deptno = (select deptno from emp where ename = 'BLAKE') and ename != 'BLAKE' ;

-- [문제9] emp 테이블에서 평균급여보다 더 많이 받는 사원들의 사번,
-- 이름, 급여를 화면에 보여주되, 급여가 높은데서 낮은 순으로 화면에 보여주세요.

select empno,ename,sal from emp where sal>(select avg(sal) from emp) order by sal desc;

-- [문제10] emp 테이블에서 이름에 'T'를 포함하고 있는 사원들과 같은 부서에
-- 근무하고 있는 사원의 사번과 이름, 부서번호를 화면에 보여주세요.

select empno,ename,deptno from emp where deptno in (select deptno from emp where ename like '%T%');


-- [문제11] 'SALES' 부서에서 근무하고 있는 사원들의 부서번호,
-- 이름, 담당업무를 화면에 보여주세요.

select e.deptno,e.ename,e.job from emp e join dept d on e.deptno = d.deptno where d.dname = (select distinct dname from dept where dname = 'SALES');

-- [문제12] emp 테이블에서 'KING'에게 보고하는 모든 사원의
-- 이름과 급여, 관리자를 화면에 보여주세요.

select ename,sal,mgr from emp where mgr =(select empno from emp where ename = 'KING');

-- [문제13] emp 테이블에서 자신의 급여가 평균급여보다 많고, 이름에
-- 'S' 자가 들어가는 사원과 동일한 부서에서 근무하는 모든 사원의 
-- 사번, 이름, 급여, 부서번호를 화면에 보여주세요.

select empno,ename,sal,deptno from emp where sal > (select avg(sal) from emp) and deptno in (select deptno from emp where ename like '%S%');

-- [문제14] emp 테이블에서 보너스를 받는 사원과 부서번호, 급여가 같은
-- 사원의 이름, 급여, 부서번호를 화면에 보여주세요.

select ename,sal,deptno from emp where mgr = (select distinct mgr from emp where comm is not null);

-- [문제15] products 테이블에서 상품의 판매가격이 판매가격의
-- 평균보다 큰 상품의 전체 내용을 화면에 보여주세요.

select * from products where output_price >(select avg(output_price) from products);

-- [문제16] products 테이블에 있는 판매 가격에서 평균 가격 이상의
-- 상품 목록을 구하되, 평균을 구할 때 가격이 가장 큰 금액인 상품을
-- 제외하고 평균을 구하여 화면에 보여주세요.

select avg(output_price) from products where output_price != (select max(output_price) from products); 

-- [문제17] products 테이블에서 카테고리의 이름에 '에어컨' 이라는
-- 단어가 포함된 카테고리에 속하는 상품목록을 화면에 보여주세요.

select * from products where products_name like '%에어컨%';

-- [문제18] member10 테이블에 있는 고객 정보 중 마일리지가 가장 높은 
-- 금액을 가지는 고객에게 보너스 마일리지 5000점을 더 주어 고객명,
-- 마일리지, 마일리지+5000 점을 화면에 보여주세요.

select memname,mileage,mileage+5000 from member10 where mileage =(select max(mileage) from member10);

=================================================================================

group by 절
 - 특정 컬럼이나 값을 기준으로 해당 레코드를 묶어서 자료를 관리할 때 사용한다.
 - 보통은 특정 컬럼을 기준으로 집계를 구하는데 많이 사용이 된다.
 - 보통은 그룹함수와 함계 사용하면 효과적으로 활용이 가능하다.

select deptno from emp order by deptno;

select deptno from emp group by deptno order by deptno;

-- emp 테이블에서 부서별로 각 부서의 인원을 확인하고 싶은 경우 

select deptno,count(*) from emp group by deptno; 

-- emp 테이블에서 부서별로 급여의 합계액을 출력

select deptno, sum(sal) from emp group by deptno order by sum(sal) desc;

--[문제] emp 테이블에서 부서별로 그룹을 지어 부서의 급여 합계와 부서별 인원 수,부서별 평균 급여, 부서별 최대 급여, 부서별, 최소 급여를 출력, 급여 합계를 기준으로 내림차순

select deptno,count(*) "부서별 인원수",sum(sal)"부서별 급여 합계",trunc(avg(sal),3) "부서별 평균 급여" ,max(sal) "부서별 최대 급여",min(sal) "부서별 최소 급여" from emp group by deptno order by sum(sal) desc;

=================================================================================

having 절
 - gruop by 절 다음에 오는 조건절
 - gruop by 절의 결과에 조건을 주어서 재한할 때 사용함
 - gruop by 절에는 where(조건절)이 올 수 없다.

--products 테이블에서 카테고리 별로 상품의 갯수를 화면에 출력하되, 상품의 갯수가 2개 이상인 상품만을 출력
select category_fk,count(*) from products group by category_fk having count(*) >= 2;

=================================================================================

View
 - 물리적인 테이블에 근거한 논리적인 가상의 테이블을 말한다.
 - View는 실질적으로 데이터를 저장하고 있지 않다.
 - View를 만들면 데이터 베이스에 질의 시 실제 테이블에 접근하여 데이터를 불러오게 됨
 - 간단하게 필요한 내용들만 추출해서 사용할 때 많이 이용된다.
 - 주로 데이터를 조회(select)할 때 많이 사용된다.
 - View는 테이블과 유사하며, 테이블처럼 사용이 가능하다
 - View는 테이블에 저장하기 위한 물리적인 공간이 필요가 없다.
 - 테이블과 마찬가지로 insert,update,delete명령어가 가능하다.
 - View를 사용하는 이유
   1) 보안 관리를 위해
   ==> 보안 등급에 맞추어 컬럼의 범위를 정해서 조회가 가능하도록 할 수 있다.
   2)사용자의 편의성을 제공
   
   형식)
        create view 뷰이름
        as
        쿼리문;

-- 인사부 View
-- 컬럼에 sal(급여),comm(보너스) 컬럼은 제외
create view emp_insa as select empno,ename,job,hiredate,deptno from emp;

-- 영업부 View
-- 컬럼에 sal(급여) 컬럼은 제외
create view emp_sales as select empno,ename,job,mgr,hiredate,comm,deptno from emp;

-- 회계부 View
-- 모든 컬럼 반영
create view emp_account as select * from emp;

insert into emp_account values(9000,'ANGEL','SALESMAN','7698',sysdate,1300,100,30); 
--emp_account view에 데이터가 들어가는게 아니라  emp테이블에 추가된 데이터를 가져오게 된다.

=================================================================================

--View를 읽기 전용으로 만들면 데이터가 추가되지 않는다.
--읽기 전용 View를 만드는 방법
-- ==> 쿼리문 마지막에 with read only문구 추가
create view emp_View1 as select * from emp with read only;
insert into emp_View1 values(9000,'ANGEL','SALESMAN','7698',sysdate,1300,100,30);

=================================================================================

--create or replace View : 같은 이름의 View가 있는 경우에는 기존의 View는 삭제하고 새로 View를 만들라는 의미
create or replace view emp_insa as select empno,ename,job,mgr,hiredate,deptno from emp with read only;

create or replace view emp_read(empno,ename,annual_salary) as select empno,ename,(sal*12+nvl2(comm,comm,0)) from emp with read only;

--[문제] 부서별로 부서별 급여 합계, 부서별 급여 평균을 구한 View를 만들어 화면에 보여주세요.
-- 주의사항) view를 만들 떄 그룹함수 사용시에는 반드시 별칭을 설정해 주어야 한다.
create view emp_sal as select deptno 부서,sum(sal) "부서별 급여 합계",trunc(avg(sal),3)"부서별 급여 평균" from emp group by deptno;


--[문제] emp테이블을 이용하여 emp_dept20 이라는 view를 만들어 주세요. 단, 부서번호가 20번 부서에 속한 사원들의
--      사번,이름,담당업무,관리자,부서번호만 화면에 보여주세요
create view emp_dept20 as select empno,ename,job,mgr,deptno from emp where deptno = 20;


--[문제] emp 테이블에서 각 부서별 최대급여와 최소급여를 보여주는 view를 만들되, sal_view라는 이름으로 만들어 화면에 출력해주세요
create view sal_view as select deptno,max(sal)"부서별 최대급여",min(sal)"부서별 최소급여" from emp group by deptno;


--[문제] 담당업무가 'SALEMAN' 인 사원의 사번,이름,담당업무,입사일, 부서번호를 컬럼으로 하는 view를 만들되
--       emp_sale 이라는 view를 만들어 화면에 보여주세요.
create view emp_sale as select empno,ename,job,hiredate,deptno from emp where job = 'SALESMAN';

=================================================================================

-- view를 만들 때 컬럼만 만들고 싶은 경우
-- ==> 조건을 줄 때 말이 안되는 조건을 작성하면 된다.
create or replace view emp_view2 as select * from emp where deptno = 1 with read only;

=================================================================================

트랜잭션(transaction)
- 데이터 처리의 한 단위를 말한다.
- 오라클에서 발생하는 여러 개의 SQL 명령문들을 하나의 논리적인 작업 단위로 처리하는 것을 의미
- ALL or Nothing 방식으로 처리한다.
- 명령어 여러 개의 집합이 정상적으로 처리가 되면 종료하고, 여러 개의 명령어 중에서 하나의 명령이라도 잘못되면 전체를 취소하게 된다.

- 트랜잭션 사용 이유 : 데이터의 일관성을 유지하면서 데이터의 안정성을 보장하기 위해

- 트랜잭션 사용 시 트랜잭션을 제어하기 위한 명령어
  1) commit : 모든 작업을 정상적으로 처리하겠다고 확정하는 명령어. 트랜잭션(insert, update,delete)작업의 내용을 실제 DB에 반영한다.
              이전에 있던 데이터에 update 현상이 발생을 한다. 모든 사용자가 변경된 데이터의 결과를 볼 수 있다.
              
  2) rollback : 작업 중에 문제가 발생했을 때 트랜잭션 처리 과정에서 발생한 변경 사항을 취소하여 이전 상태로 되돌리는 명령어
                트랜잭션(inser,update,delete)작업 처리 내용을 취소하고 commit 한 곳까지만 복구가 가능하다.

-- 1. dept 테이블을 복사하여 dept_02 라는 테이블을 만들어보자
create table dept_02 as select * from dept;      --테이블 복사

-- 2. dept_02 테이블에서 40번 부서를 삭제한 후에 commit을 해보자
-- delete from 테이블 이름 where primary key로 지칭된 데이터(unique+not null)
delete from dept_02 where deptno = 40;
commit;

-- 3. dept_02 테이블의 내용을 삭제해 보자.
delete from dept_02;

-- 4. 이 떄 만일 20번 부서에 대해서만 삭제를 하고 싶었는데 잘못해서 젅체가 삭제된 경우 다시 복원 할 수 있다.
rollback;

-- 5. 20번 부서만 삭제해 보자
delete from dept_02 where deptno = 20;

-- 6. 데이터베이스에 완전하게 적용을 시켜보자
commit;

=================================================================================

savepoint
 - 트랜잭션을 작게 분할 하는 것을 말한다.
 - 사용자가 트랜잭션 중간 단계에서 포인트를 지정하여 트랜잭션 내의 특정 svaepoint까지 rollback 할 수 있게 하는 것을 말한다.

-- 1. dept 테이블을 복사하여 dept_03 테이블을 만들자
create table dept_03 as select * from dept;

-- 2. dept_03 테이블에서 40번 부서를 삭제 후 coomit 해 보자.
delete from dept_03 where deptno = 40;
commit;

-- 3. dept_03 테이블에서 30번 부서를 삭제하자
delete from dept_03 where deptno = 30;

-- 4. 이 때 savepoint sp1을 설정해 보자
savepoint sp1;

-- 5. 부서번호가 20번인 부서를 삭제하자.
delete from dept_03 where deptno=20;

-- 6. savepoint sp2 를 설정해 보자.
savepoint sp2;

-- 7. 마지막으로 부서번호가 10번인 붓를 삭제하자.
delete from dept_03 where deptno=10;

-- 8. 부서번호가 20번 부서를 삭제하기 바로 전으로 되돌리기
--rollback을 이용하여 특정 지점으로 돌아 갈 수 있다.
rollback sp1;

=================================================================================

PL/SQL(Procedual Language / SQL)
 - SQL 만으로는 구현이 어렵거나 구현 불가능한 작업을 수행하기 위해서 오라클에서 제공하는 프로그래밍 언어를 말한다.
 - 일반적으로 프로그래밍 언어적인 요소들을 다 가지고 있으며, 데이터베이스 업무를 처리하기 위한 최적화된 언어
 - 변수,조건처리, 반복 처리 등 다양한 기능을 사용 할 수 있다.
 
 - 기본 구조 : declare *** begin *** end;  /

  1) 선언부(declare) : 모든 변수를 선언하는 부분
  2) 실행부(executable ~ begin)
   - 실제 로직이 실행되는 부분
   - 제어문(조건문),반복문, 함수 정의 등의 로직을 기술하는 부분
  3) 예외처리부(exception)
   - 실행 도중 예외가 발생 시 해결하기 위한 명령들을 기술하는 부분
 - 위 기본 구조 중에서 선언부와 예외처리부는 생략 가능하지만, 실행부만은 생략이 불가능하다
 
 - PL/SQL 사용 시 주의사항
  1) 기본 구조(declare,begin,exception)키워드 뒤에는 세미콜론(;)을 붙이지 않는다.
  2) 블럭의 각 부분에서 실행해야 하는 문장 끝에는 반드시 세미콜론(;)을 붙인다.
  3) begin ~ end(실행부) alxdpsms qksemtl '/'를 붙여 주어야 한다.

-- 화면에 출력 기능을 활성화 시켜야 한다.
set serveroutput on;
begin
dbms_output.put_line('Hello PL/SQL');
end;
/

-- 선언부(declare) 영역에 변수를 선언하는 방법

-- 1) 스칼라 자료형
--  형식) 변수명 자료형(크기);
--  예) num number(3);,name varchar2(20);
declare 
V_empno number(4) := 7788;
V_ename varchar2(20); 
begin 
V_ename := 'ADAMS';
dbms_output.put_line('V_empno >>>' || V_empno); 
dbms_output.put_line('V_ename >>>' || V_ename);
end;
/

-- 2) 레퍼런스 자료형
--  테이블에 정의된 컬럼의 자료형과 크기를 모두 파악하고 있다면 문제가 없겠지만, 대부분은 그렇지 못하기 때문에
--  오라클에서는 레퍼런스(reference)변수를 제공해 준다.
--  형식) 변수명 테이블명.컬럼명%type;
--  예) num emp.empno%type;
declare 
e_empno emp.empno%type;
e_ename emp.ename%type;
begin
e_empno :=7900;
e_ename :='SCOTT';
dbms_output.put_line('V_empno >>>' || e_empno); 
dbms_output.put_line('V_ename >>>' || e_ename);
end;
/
-- 3) rowtype 자료형
-- 테이블의 모든 컬럼을 한꺼번에 저장하기 위한 변수로 선언하는 방법
-- 형식) e_row emp%rowtype;

declare
emp_row emp%rowtype;
begin
select * into emp_row from emp where empno = 7698;
dbms_output.put_line(emp_row.empno || ' ' || emp_row.ename || ' ' || emp_row.job || ' ' || emp_row.sal || ' ' || emp_row.deptno);
end;
/

=================================================================================

조건 제어문(조건문)
 - 특정 조건식을 통해 상황에 따라 실행할 내용을 달리하는 방식의 명령어를 말한다.
 
  1. if 조건문
   1) if ~ then 
    - 특정 조건을 만족하는 경우에 작업을 수행
    - 형식)
        if 조건식 then
            조건식이 참인 경우 실행 문장;
        end if
            
   2) if ~ then ~ else
    - 특정 조건식에 만족하는 경우와 반대의 경우에 각자 지정한 작업을 수행한다.
    - 형식)
        if 조건식 then
            조건식이 참인 경우 실행 문장;
        else 
            조건식이 거짓인 경우 실행 문장;
        end if
   3) if ~ then ~ elsif
    - 여러 가지 조건에 따라 각자 지정한 작업을 수행한다.
    - 형식) 
        if 조건식1 then
            조건식1이 참인 경우 실행 문장;
        elsif 조건식2 then
            조건식1이 거짓이고,조건식2가 참인 경우 실행 문장;
        elsif 조건식3 then
            조건식1,조건식2가 거짓이고,조건식3이 참인 경우 실행 문장;
        else
            조건식1,조건식2,조건식3 모두 거짓인 경우 실행 문장;
        end if

-- 1) if ~ then 예제
declare 
e_number number(3) := 77;
begin
if e_number >= 10 then
    dbms_output.put_line(e_number || ' 는 10보다 큰 수 입니다.');
end if;
end;
/

-- 2) if~ then ~ else 예제
--[문제] 입력받은 수에 저장되어 있는 값이 홀수인지, 짝수인지를 판별하여 화면에 출력해주세요
declare
e_number1 number(3) :=30;
e_number2 number(3) := 2;
begin
if mod(e_number1,2)= 0 then
    dbms_output.put_line(e_number1 || ' 는 짝수 입니다.');
else 
    dbms_output.put_line(e_number1 || ' 는 홀수 입니다.');
end if;
end;
/

-- 3) if ~ then ~elsif 예제
declare
e_avg number(5,2) := 89.12;
begin
if e_avg >=90then
dbms_output.put_line('A학점입니다.');
elsif e_avg >=80then
dbms_output.put_line('B학점입니다.');
elsif e_avg >=70then
dbms_output.put_line('C학점입니다.');
elsif e_avg >=60then
dbms_output.put_line('D학점입니다.');
else
dbms_output.put_line('F학점입니다.');
end if;
end;
/

=================================================================================

2. case 조건문
  형식)
    case 비교 기준
        when 값1 then
            수행할 명령어;
        when 값2 then
            수행할 명령어;
        when 값3 then
            수행할 명령어;
        else
            값1,값2,값3이 아닌 다른 값일 경우 수행할 명령어
        end case;

declare
e_score number(3) := 93;
begin
    case trunc(e_score / 10)
    when 10 then
    dbms_output.put_line('A학점입니다');
    when 9 then
    dbms_output.put_line('B학점입니다.');
    when 8 then
    dbms_output.put_line('C학점입니다.');
    when 7 then
    dbms_output.put_line('D학점입니다.');
    else
    dbms_output.put_line('F학점입니다.');
    end case;
end;
/

-- 키보드로 데이터를 입력받는 방법
declare
e_num number(3);
begin
e_num := '&num';
dbms_output.put_line('입력받은 수 >>> ' || e_num);
end;
/